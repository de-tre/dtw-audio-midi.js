{"mappings":"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","sources":["js/handles.js"],"sourcesContent":["// Select files, execute DTW and store path data as .json\r\nwindow.onload = async () => {\r\n\r\n    let selector;\r\n    let features = [0, 0];\r\n    let dtwData, jsonPathData;\r\n\r\n    // Once a file button is pressed...\r\n    const inputFile = document.querySelectorAll('input[type=file]').forEach(e => e.addEventListener('click', (event) => {\r\n        let elem = event.target;\r\n\r\n        // Store pressed button as numeric value\r\n        if (elem.id == \"inputaudio\") {\r\n            selector = 0;\r\n        } else if (elem.id == \"inputmidi\") {\r\n            selector = 1;\r\n        }\r\n\r\n        // Retrieve window URL from input file\r\n        elem.onchange = async () => {\r\n            let url = null;\r\n            const fileObj = document.querySelectorAll('input[type=file]')[selector].files[0];\r\n\r\n            if (window.createObjcectURL != undefined) {\r\n                url = window.createOjcectURL(fileObj);\r\n            } else if (window.URL != undefined) {\r\n                try {\r\n                    url = window.URL.createObjectURL(fileObj);\r\n                } catch (e) {\r\n                    console.log(\"Abort\");\r\n                    console.error(e);\r\n                }\r\n            } else if (window.webkitURL != undefined) {\r\n                url = window.webkitURL.createObjectURL(fileObj);\r\n            }\r\n\r\n            console.time(\"Extraction time\");\r\n            console.log(`__________`);\r\n\r\n            // Once the audio file is loaded, analyse\r\n            if (elem.id == \"inputaudio\") {\r\n                features[0] = await analyseAudio(url);\r\n                \r\n                // When MIDI file is loaded, analyse\r\n            } else if (elem.id == \"inputmidi\") {\r\n                if (fileObj.type == \"audio/mid\") {\r\n                    features[1] = await analyseMIDI(fileObj);\r\n                    \r\n                } else {\r\n                    try {\r\n                        features[1] = await analyseAudio(url);\r\n                    }\r\n                    catch (e) {\r\n                        console.error(\"Wrong file type: \", fileObj.type, \"\\nAudio is needed\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"Loaded: \", fileObj.name)\r\n            console.timeEnd(\"Extraction time\");\r\n            console.log(`__________`);\r\n\r\n            console.log(\"Current features:\\n\", {audio: features[0], \r\n                                                N: features[0][0] ? features[0][0].length : 0, \r\n                                                midi: features[1], \r\n                                                M: features[1][0] ? features[1][0].length : 0});\r\n\r\n            // Plot features\r\n            if (!features[0].length < 1) {\r\n                let plotAudio = chromaHeatMap(features[0],  '$\\\\text{Audio STFT chroma } X_{n}$');\r\n                Plotly.newPlot('audiofeatures', plotAudio['plot'], plotAudio['layout'], {scrollZoom: false});\r\n            }\r\n            if (!features[1].length < 1 ) {\r\n                let plotMIDI = chromaHeatMap(features[1], '$\\\\text{MIDI chroma } Y_{m}$');\r\n                Plotly.newPlot('midifeatures', plotMIDI['plot'], plotMIDI['layout'], {scrollZoom: false});\r\n            }\r\n\r\n            // Wait 5ms so the MIDI chroma has time to display\r\n            await delay(5);\r\n\r\n            // If both chromas are present, start calculating DTW right away\r\n            if (!features[0] == 0 && !features[1] == 0) {\r\n                console.log(`__________`);\r\n                console.log(\"All required features are present. Starting dtw...\");\r\n                console.time(\"Time dtw\");\r\n                dtwData = await dtw(features[0], features[1]);\r\n                dtwData = {path_P: dtwData[0], costMatrix_D: dtwData[1]};\r\n                console.timeEnd(\"Time dtw\");\r\n                console.log(`__________`);\r\n                console.log(\"Finished.\\nYou can now save the dtw.json!\\nData:\\n\", dtwData);\r\n                \r\n                // Plot cost matrix and path\r\n                costPathPlot(dtwData['costMatrix_D'], dtwData['path_P'])\r\n                jsonPathData = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(dtwData['path_P']));\r\n            }\r\n        }\r\n    }));\r\n\r\n    // Save and restart button actions\r\n    const btn = Array.from(document.getElementsByClassName('btn')).forEach(e => e.addEventListener('click', async (e) => {\r\n        let elem = e.target;\r\n\r\n        // Empty all data\r\n        if (elem.id == \"btnReset\") {\r\n            features = [0,0];\r\n            dtwData = null;\r\n            jsonPathData = null;\r\n            document.getElementById(\"inputaudio\").value = \"\";\r\n            document.getElementById(\"inputmidi\").value = \"\";\r\n            Plotly.purge(\"audiofeatures\");\r\n            Plotly.purge(\"midifeatures\");\r\n            Plotly.purge(\"path\");\r\n            console.clear();\r\n            \r\n        // Download path_P.json\r\n        } else if (elem.id == \"btnDTW\") {\r\n            if (!dtwData) { \r\n                console.log(\"Not available\") \r\n            } else {\r\n                console.log(\"Saving...\");\r\n                exportJson(jsonPathData)\r\n            }\r\n        }\r\n    }));\r\n}\r\n\r\n// Export DTW data\r\nfunction exportJson(jsonPathData) {\r\n    keyFileName = \"dtw\"\r\n\r\n    let temporaryDownloadLink = document.createElement(\"a\");\r\n    temporaryDownloadLink.style.display = 'none';\r\n    document.body.appendChild( temporaryDownloadLink );\r\n\r\n    temporaryDownloadLink.setAttribute( 'href', 'data:'+jsonPathData );\r\n    temporaryDownloadLink.setAttribute( 'download', 'dtw.json');\r\n    temporaryDownloadLink.click();\r\n}"],"names":[],"version":3,"file":"index.757071bf.js.map","sourceRoot":"/__parcel_source_root/"}